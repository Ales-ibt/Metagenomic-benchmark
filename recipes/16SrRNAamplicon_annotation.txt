##################################################
# Taxonomic annotation of 16S rRNA amplicon data #
##################################################

##### This recipe describes the analysis made using the in-silico 16S rRNA amplicon sequences available in the datasets_16SrRNA directory of this repository, in order to test the methods reported in the "Analysis of sequencing strategies and tools for taxonomic annotation: Defining standards for progressive metagenomics" paper. The annotation output tables were formatted to obtain a relational table containing the sequence id, the taxid of their respective annotation and the score (reads_ranking.txt table). Examples of the intermediate results generated from each software are available in the examples directory of this repository. Below are described the commands used to run every program and to convert the resulting annotation table into the reads.ranking.txt table. From the latter, we evaluated the software performance at every taxonomic level as is described in the performance_evaluation.txt recipe.

########################
## 1.- Metaxa2 v2.2.1 ##
########################

$ metaxa2 -1 file_R1.fq -2 file_R2.fq -o metaxa_out -f fastq --plus T --fasta F --cpu 32 -d /PATH/database.fasta

# The output used to generate the reads_ranking.txt table was the metaxa_out.taxonomy.txt file

# Get reads_ranking.txt table
## cut reads_id, assigment result and %identity
### GG database
$ cut -f1,2,5 metaxa_out.taxonomy.txt |sed 's/k__//;s/ p__//;s/ c__//;s/ o__//;s/ f__//;s/ g__//;s/ s__//; s/;\t/\t/'| sed 's/;\+\t/\t/'| sed 's/;\+/;/' > classification_mod.txt
$ Rscript 0.get_table_metaxa_gg.R taxid_dobles.txt get_taxid_from_names.py

### MTX database
$ cut -f1,2,5 metaxa_out.taxonomy.txt |sed 's/;\t/\t/'| sed 's/;\+\t/\t/'| sed 's/;\+/;/' > classification_mod.txt
$ Rscript 0.get_table_metaxa_mtx_rdp.R taxid_dobles.txt get_taxid_from_names.py

### SILVA database
$ cut -f1,2,5 metaxa_out.taxonomy.txt | sed 's/;\+\t/\t/'| sed 's/;\+/;/' > classification_mod.txt
$ Rscript 0.get_table_metaxa_silva.R taxid_dobles.txt get_taxid_from_names.py

### RDP database
$ cut -f1,2,5 metaxa_out.taxonomy.txt |sed 's/;\t/\t/'| sed 's/;\+\t/\t/'| sed 's/;\+/;/' > classification_mod.txt
$ Rscript 0.get_table_metaxa_mtx_rdp.R taxid_dobles.txt get_taxid_from_names.py

# Get linage from each read
$ python 2.get_linage_rank.py

# Order linage
$ 3.order_lineage_method.pl taxid_ranking_linage.txt > lineaje_ordenada.tab

# Add original Genome to table with linage
$ Rscript 4.tabla_ordenada_conGenoma.R

# Get table with FALSE and POSITIVES results for each assigment
$ Rscript 5.tabla_new.R ncbi_plus_unicos.txt

# Substitute NA by 0 and sort table according with the best score
$ sed -i '1d' tabla_new.tab
$ sed 's/\<NA\>/0/g' tabla_new.tab| sort -nr -k 10 > tabla_sort.tab

# Clean intermediate levels
$ 7.subtit_TF.pl tabla_sort.tab > tabla_sort2.tab

# Remove intermediate tables
$ rm last.class_mod2.txt last.class_mod.txt otus_unicos_mod.txt otus_unicos_taxid_mod.txt otus_unicos.txt taxid_ranking_linage.txt lineaje_ordenada.tab tabla_conGenomas_para_CVE.tab tabla_new.tab tabla_sort.tab classification_mod.txt

########################################
## 2.- Parallel-meta v2.4.1 (patched) ##
########################################

# Parallel-meta includes the RDP (R), GreenGenes (G) and SILVA (S) databases in the v2.4.1 distribution. The patched included in the bin directory of this repository activates the Metaxa2 database option with the flag "X" in -d parameter.

$ parallel-meta -b B -m file.fastq -d X|R|G|S -n 32

# The output used to generate the reads_ranking.txt table was the classification.txt file.
# Get reads_ranking.txt table
## cut reads_id, assigment result and E-value
### GG database
$ Rscript 0.get_table_parallel_gg.R taxid_dobles.txt get_taxid_from_names.py

### MTX database
$ sed -e 's/^[a-zA-Z0-9]*|//g;s/rev|//g' classification.txt | cut -f1,4,5 | sed 's/;\+\t/\t/'| sed 's/;\+/;/'| sed 's/; /;/g' > classification_mod.txt
$ sed -i '1d' classification_mod.txt
$ Rscript 0.get_table_mtx_rdp_silva.R taxid_dobles.txt get_taxid_from_names.py

### SILVA database
$ sed -e 's/^[a-zA-Z0-9]*|//g;s/rev|//g' classification.txt |  cut -f1,4,5 | sed 's/; Unclassified*.*//g; s/;\+\t/\t/;s/; /;/g'| sed 's/;\+/;/' > classification_mod.txt
$ sed -i '1d' classification_mod.txt
$ Rscript 0.get_table_mtx_rdp_silva.R taxid_dobles.txt get_taxid_from_names.py

### RDP database
$ sed -e 's/^[a-zA-Z0-9]*|//g;s/rev|//g' classification.txt |  cut -f1,4,5 | sed 's/; Unclassified*.*//g; s/;\+\t/\t/;s/; /;/g'| sed 's/;\+/;/' > classification_mod.txt
$ sed -i '1d' classification_mod.txt
$ Rscript 0.get_table_mtx_rdp_silva.R taxid_dobles.txt get_taxid_from_names.py

# Get linage from each read
$ python 2.get_linage_rank.py

# Order linage
$ 3.order_lineage_method.pl taxid_ranking_linage.txt > lineaje_ordenada.tab

# Add original Genome to table with linage
$ Rscript 4.tabla_ordenada_conGenoma.R

#Contruct table with FALSE and POSITIVES results for each assigment
$ Rscript 5.tabla_new.R ncbi_plus_unicos.txt

#Substitute NA by 0 and sort table according with the best score
$ sed -i '1d' tabla_new.tab
$ sed 's/\<NA\>/0/g' tabla_new.tab| sort -nr -k 10 > tabla_sort.tab

# Clean intermediate levels
$ 7.subtit_TF.pl tabla_sort.tab > tabla_sort2.tab

# Remove intermediate tables
$ rm last.class_mod2.txt last.class_mod.txt otus_unicos_mod.txt otus_unicos_taxid_mod.txt otus_unicos.txt taxid_ranking_linage.txt lineaje_ordenada.tab tabla_conGenomas_para_CVE.tab tabla_new.tab tabla_sort.tab classification_mod.txt

#####################
## 3.- SPINGO v1.3 ##
#####################

$ spingo -p 32 -d /PATH/database.fasta -i *.fasta -a > result.txt

# In this particular case, if a query sequence contains a set of k-mers associated to more than one reference, the method labels it as AMBIGUOUS and reports a list of possible matches. We extracted the lowest common ancestor from the list of reported species using the spingo_cleaner.pl script:

$ spingo_cleaner.pl spingo_result.txt

# This step, generates the lca_spingo_results_rdp.txt file in tabuklar format with the following information per column: read id, similarity score, taxonomic annotation and AMBIGUOUS/UNAMBIGUOUS label. This file was used to generate the reads_ranking.txt table. Due to each database used had their own partocular format, we used different splingo cleaner scripts depending on the case. For RDP database, we used the spingo_cleaner_RDP.pl; for SILVA database, we used spingo_cleaner_SIL.pl and for GG and Metaxa2 databases, we used the spingo_cleaner_GG_MTX.pl script. All the spingo cleaner scripts are available in the bin/16SrRNAamplicon directory of this repository.

# Get reads_ranking.txt table
## cut reads_id, score and assigment result
### GG database
$ cut -f 1,2,3 lca_spingo_results.txt > classification_mod.txt
$ cut -f3 classification_mod.txt | rev |cut -d ';' -f1 | rev | sed 's/sp\$/sp./;s/_/ /g' > last.class.txt
$ paste classification_mod.txt last.class.txt > otus_unicos.txt
$ Rscript 0.get_table_spingo_gg_mtx_silva_rdp.R taxid_dobles.txt get_taxid_from_names.py

### MTX database
$ cut -f 1,2,3 lca_spingo_results.txt > classification_mod.txt
$ cut -f3 classification_mod.txt | rev |cut -d ';' -f1 | rev | sed s/sp\$/sp./ > last.class.txt
$ paste classification_mod.txt last.class.txt > otus_unicos.txt
$ Rscript 0.get_table_spingo_gg_mtx_silva_rdp.R taxid_dobles.txt get_taxid_from_names.py

### SILVA database
$ cut -f 1,2,3 lca_spingo_results.txt | grep -v 'Unclassified' > classification_mod.txt
$ cut -f3 classification_mod.txt | rev |cut -d ';' -f1 | rev | sed 's/sp\$/sp./;s/_/ /g' > last.class.txt
$ paste classification_mod.txt last.class.txt > otus_unicos.txt
$ Rscript 0.get_table_spingo_gg_mtx_silva_rdp.R taxid_dobles.txt get_taxid_from_names.py

### RDP database
$ cut -f 1,2,3 lca_spingo_results.txt > classification_mod.txt
$ cut -f3 classification_mod.txt| sed 's/sp\$/sp./;s/_/ /g' > last.class.txt
$ paste classification_mod.txt last.class.txt > otus_unicos.txt
$ Rscript 0.get_table_spingo_gg_mtx_silva_rdp.R taxid_dobles.txt get_taxid_from_names.py

# Get linage from each read
$ python 2.get_linage_rank.py

# Order linage
$ 3.order_lineage_method.pl taxid_ranking_linage.txt > lineaje_ordenada.tab

# Add original Genome to table with linage
$ Rscript 4.tabla_ordenada_conGenoma_amplicon.R

#Get table with FALSE and POSITIVES results for each assigment
$ Rscript 5.tabla_new.R ncbi_plus_unicos.txt

#Substitute NA by 0 and sort table according with the best score
$ sed -i '1d' tabla_new.tab
$ sed 's/\<NA\>/0/g' tabla_new.tab| sort -nr -k 10 > tabla_sort.tab

# Clean intermediate levels
$ 7.subtit_TF.pl tabla_sort.tab > tabla_sort2.tab

# Remove intermediate tables
$ rm classification_mod.txt otus_unicos_taxid_mod.txt tabla_conGenomas_para_CVE.tab tabla_sort.tab lineaje_ordenada.tab otus_unicos.txt tabla_new.tab taxid_ranking_linage.txt otus_unicos_mod.txt


######################
## 4.- QIIME v1.9.1 ##
######################

$ pick_otus.py -i file.fasta -o uclust_picked_otus --threads 16
$ pick_rep_set.py -i uclust_picked_otus/file_otus.txt -f file.fasta -l rep_set/file_rep_set.log -o rep_set/file_otus_rep_set.fasta
$ assign_taxonomy.py -i rep_set/file_otus_rep_set.fasta -o uclust_assigned_taxonomy -r db.fasta -t taxonomy.txt

# The assign_taxonomy.py output contain the annotation for each OTU representative sequence. The otu_ranking.txt table was obtained by the following treatment:

### GG database
$ cut -f1,2,3 flash_out.extendedFrags_otus_rep_set_tax_assignments.txt | sed 's/k__//;s/ p__//;s/ c__//;s/ o__//;s/ f__//;s/ g__//;s/ s__//; s/;\t/\t/'| sed 's/;\+\t/\t/'| sed 's/;\+/;/' > classification_mod.txt
$ Rscript 0.get_table_qimme.R taxid_dobles.txt get_taxid_from_names.py

### MTX database
$ grep -w -v 'Unassigned' flash_out.extendedFrags_otus_rep_set_tax_assignments.txt | cut -f1,2,3 | sed 's/;\+\t/\t/;s/; /;/g'| sed 's/;\+/;/' > classification_mod.txt
$ Rscript 0.get_table_qimme.R taxid_dobles.txt get_taxid_from_names.py

### SILVA database
$ cut -f1,2,3 flash_out.extendedFrags_otus_rep_set_tax_assignments.txt | sed 's/;\+\t/\t/;s/_/ /g'| sed 's/;\+/;/' > classification_mod.txt
$ Rscript 0.get_table_qimme_silva.R taxid_dobles.txt get_taxid_from_names.py

### RDP database
$ cut -f1,2,3 flash_out.extendedFrags_otus_rep_set_tax_assignments.txt | sed 's/;\+\t/\t/;s/; /;/g'| sed 's/;\+/;/' > classification_mod.txt
$ Rscript 0.get_table_qimme.R taxid_dobles.txt get_taxid_from_names.py

# We generated an intermediate table containing the annotation for each read using the OTUs table (pick_otus.py script output) and the otu_ranking.txt table. The qiime_transfer.pl script is available in the bin/16SrRNAamplicon directory of this repository.

$ qiime_transfer.pl PATH/otus/uclust_picked_otus/flash_out.extendedFrags_otus.txt otu_ranking.txt

# This step transforms the otu_ranking.txt into a trans_reads_ranking.txt table whit the following fileds: read id, annotation taxid and score.

$ mv trans_reads_ranking.txt reads_ranking.txt
# Get linage from each read
$ python 2.get_linage_rank.py

# Order linage
$ 3.order_lineage_method.pl taxid_ranking_linage.txt > lineaje_ordenada.tab

# Add original Genome to table with linage
$ Rscript 4.tabla_ordenada_conGenoma_amplicon.R

#Get table with FALSE and POSITIVES results for each assigment
$ Rscript 5.tabla_new.R ncbi_plus_unicos.txt

#Substitute NA by 0 and sort table according with the best score
$ sed -i '1d' tabla_new.tab
$ sed 's/\<NA\>/0/g' tabla_new.tab| sort -nr -k 10 > tabla_sort.tab

# Clean intermediate levels
$ 7.subtit_TF.pl tabla_sort.tab > tabla_sort2.tab

# Remove intermediate tables
$ rm classification_mod.txt otus_unicos_mod.txt otus_unicos_taxid_mod.txt tabla_conGenomas_para_CVE.tab tabla_sort.tab lineaje_ordenada.tab tabla_new.tab taxid_ranking_linage.txt
