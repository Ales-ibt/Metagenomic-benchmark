##################################################
# Taxonomic annotation of 16S rRNA amplicon data #
##################################################

##### This recipe describes the analysis made using the in-silico 16S rRNA amplicon sequences available in the datasets_16SrRNA directory of this repository, in order to test the methods reported in the "Analysis of sequencing strategies and tools for taxonomic annotation: Defining standards for progressive metagenomics" paper. The annotation output tables were formatted in order to obtain a relational table containing the sequence id, the taxid of their respective annotation and the score (reads_ranking.txt table). Examples of the intermediate results generated from each software are available in the examples directory of this repository. Below are described the commands used to run every program and to convert the resulting annotation table into the reads.ranking.txt table. From the latter, we evaluated the software performance at every taxonomic level as is described in the performance_evaluation.txt recipe.

## 1.- Metaxa2 v2.2.1

$ metaxa2 -1 file_R1.fq -2 file_R2.fq -o metaxa_out -f fastq --plus T --fasta F --cpu 32 -d /PATH/database.fasta

# The output used to generate the reads_ranking.txt table was the metaxa_out.taxonomy.txt file


## 2.- Parallel-meta v2.4.1 (patched)
# Parallel-meta includes the RDP (R), GreenGenes (G) and SILVA (S) databases in the v2.4.1 distribution. The patched included in the bin directory of this repository activates the Metaxa2 database option with the flag "X" in -d parameter.

$ parallel-meta -b B -m file.fastq -d X|R|G|S -n 32

# The output used to generate the reads_ranking.txt table was the classification.txt file.


## 3.- SPINGO v1.3

$ spingo -p 32 -d /PATH/database.fasta -i *.fasta -a > result.txt

# In this particular case, if a query sequence contains a set of k-mers associated to more than one reference, the method labels it as AMBIGUOUS and reports a list of possible matches. We extracted the lowest common ancestor from the list of reported species using the spingo_cleaner.pl script, available in the bin/16SrRNAamplicon directory of this repository.

$ spingo_cleaner.pl spingo_result.txt



## 4.- QIIME v1.9.1

$ pick_otus.py -i file.fasta -o uclust_picked_otus --threads 16
$ pick_rep_set.py -i uclust_picked_otus/file_otus.txt -f file.fasta -l rep_set/file_rep_set.log -o rep_set/file_otus_rep_set.fasta
$ assign_taxonomy.py -i rep_set/file_otus_rep_set.fasta -o uclust_assigned_taxonomy -r db.fasta -t taxonomy.txt

# The assign_taxonomy.py output contain the annotation for each OTU representative sequence. The reads_ranking.txt table was obtained from by the following treatment:

==TINA==

# We generated an intermediate table containing the annotation for each read using the OTUs table (pick_otus.py script output) and the reads_ranking.txt table. The qiime_transfer.pl script is available in the bin/16SrRNAamplicon directory of this repository.

$ qiime_transfer.pl PATH/otus/uclust_picked_otus/flash_out.extendedFrags_otus.txt reads_ranking.txt

# This step transforms the reads_ranking.txt into a trans_reads_ranking.txt table whit the following fileds: read id, annotation taxid and score










